{
	function Expression(type, content, text, exprLabel) {
		this.type = type
		this.content = content
		this.text = text
		this.exprLabel = exprLabel
		this.location = location()
	}
	input = input.replaceAll(/&([A-Za-z_]+)/g, 'call $$$1')
	input = input.replaceAll(/%deffunc ([A-Za-z_]+) /g, '.var $1 :set $1 :lambda ')
	input = input.replaceAll('$_', '.evalget _')
	input = input.replaceAll('<-', ' set ')
}

start
	= program

program
	= __ expr:expression __ { return new Expression('program', expr, expr.text) }

expression
	= "(" __ startExpr:expression expr:WSexpression* __ ")" { return new Expression('expression', [startExpr].concat(expr), '('+startExpr.text+' '+expr.map(elt=>elt.text).join(' ')+')' ) }
	/ "[" __ startExpr:expression expr:WSexpression* __ "]" { return new Expression('expression', [startExpr].concat(expr), '['+startExpr.text+' '+expr.map(elt=>elt.text).join(' ')+']' ) }
	/ "{" __ startExpr:expression exprLabel:exprLabel? expr:WSexpression* __ "}" { return new Expression('expression', [startExpr].concat(expr), '{'+startExpr.text+' '+expr.map(elt=>elt.text).join(' ')+'}', exprLabel ) }
	/ number / string / name
	/ expression0 / expression1 / expression2 / expression3 / expression4 / expressionEmpty

WSexpression
	= spaces expr:expression { return expr; }

expression0
	= "!" n:name { return new Expression('expression', [n], '!'+n.text) }

expression1
	= "." n:name spaces e1:expression { return new Expression('expression', [n, e1], '.'+n.text+' '+e1.text) }

expression2
	= ":" n:name spaces e1:expression spaces e2:expression { return new Expression('expression', [n, e1, e2], ':'+n.text+' '+e1.text+' '+e2.text) }

expression3
	= "%" n:name spaces e1:expression spaces e2:expression spaces e3:expression { return new Expression('expression', [n, e1, e2, e3], '%'+n.text+' '+e1.text+' '+e2.text+' '+e3.text) }

expression4
	= "$" expr:expression { return new Expression('expression', [new Expression('identifier', 'get', 'get'), expr], '$'+expr.text) }

expressionEmpty
	= "(" spac:__ ")" { return new Expression('expression', [], '('+spac.join("")+')') }

exprLabel
	= spaces "@" n:[A-Za-z_]+ { return n.join("") }

name
	= simpleName

simpleName
	= n:[A-Za-z_=+*/<>-]+ { return new Expression('identifier', n.join(""), n.join("")) }

__
	= (comment / singleSpace / newline)*

spaces
	= (comment / singleSpace / newline)+

comment
	= "#" [^\n\r]* newline

singleSpace
	= [ \t]

whiteSpace
	= [ \t\n\r]+

newline
	= [\n\r]

number
	= digits:("-"?[0-9]+) { return new Expression('number', parseInt((digits[0] || '') + digits[1].join(""), 10), (digits[0] || '') + digits[1].join("")) }

string
	= '"' content:[^"]* '"' { return new Expression('string', content.join(""), '"'+content.join("")+'"' ) }
	/ "'" content:[^']* "'" { return new Expression('string', content.join(""), "'"+content.join("")+"'" ) }
	/ '`' content:[^`]* '`' { return new Expression('string', content.join(""), '`'+content.join("")+'`' ) }
