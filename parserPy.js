pegPy = // Generated by Peggy 3.0.2.
//
// https://peggyjs.org/
(function() {
  "use strict";

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { start: peg$parsestart };
  var peg$startRuleFunction = peg$parsestart;

  var peg$c0 = "break";
  var peg$c1 = "restart";
  var peg$c2 = "pause";
  var peg$c3 = "resume";
  var peg$c4 = "await";
  var peg$c5 = "Bip";
  var peg$c6 = "Beep";
  var peg$c7 = ":";
  var peg$c8 = "echo";
  var peg$c9 = "(";
  var peg$c10 = ")";
  var peg$c11 = ".";
  var peg$c12 = "varmul";
  var peg$c13 = ":=";
  var peg$c14 = "var";
  var peg$c15 = "=";
  var peg$c16 = "blockCall";
  var peg$c17 = "@";
  var peg$c18 = ",";
  var peg$c19 = "[";
  var peg$c20 = "]";
  var peg$c21 = "|";
  var peg$c22 = "seq:";
  var peg$c23 = "onBreak:";
  var peg$c24 = "par";
  var peg$c25 = "mix";
  var peg$c26 = "inside";
  var peg$c27 = "exitAfter";
  var peg$c28 = "finished";
  var peg$c29 = "supplBranchBy";
  var peg$c30 = "if";
  var peg$c31 = "else:";
  var peg$c32 = "while";
  var peg$c33 = "repeat";
  var peg$c34 = "spawn";
  var peg$c35 = "js";
  var peg$c36 = "whileTrueAwaitFrame";
  var peg$c37 = "whileTrueAwaitDom_js";
  var peg$c38 = "match";
  var peg$c39 = "case";
  var peg$c40 = "def";
  var peg$c41 = "whileTrue_dependsOn";
  var peg$c42 = "**";
  var peg$c43 = "*";
  var peg$c44 = "/";
  var peg$c45 = "+";
  var peg$c46 = "-";
  var peg$c47 = "<=";
  var peg$c48 = ">=";
  var peg$c49 = "!=";
  var peg$c50 = "<";
  var peg$c51 = ">";
  var peg$c52 = "not";
  var peg$c53 = "and";
  var peg$c54 = "or";
  var peg$c55 = "_";
  var peg$c56 = "#";
  var peg$c57 = "//";
  var peg$c58 = "true";
  var peg$c59 = "false";
  var peg$c60 = "\"";
  var peg$c61 = "'";
  var peg$c62 = "`";
  var peg$c63 = "\t";

  var peg$r0 = /^[\-+*\/]/;
  var peg$r1 = /^[A-Za-z]/;
  var peg$r2 = /^[0-9A-Za-z_]/;
  var peg$r3 = /^[A-Za-z_]/;
  var peg$r4 = /^[=+*\/<>\-]/;
  var peg$r5 = /^[_=+*\/<>\-]/;
  var peg$r6 = /^[^\n\r]/;
  var peg$r7 = /^[ \t]/;
  var peg$r8 = /^[ \t\n\r]/;
  var peg$r9 = /^[\n\r]/;
  var peg$r10 = /^[0-9]/;
  var peg$r11 = /^[.]/;
  var peg$r12 = /^[^"]/;
  var peg$r13 = /^[^']/;
  var peg$r14 = /^[^`]/;
  var peg$r15 = /^[^\t\n]/;
  var peg$r16 = /^[^\n]/;

  var peg$e0 = peg$literalExpectation("break", false);
  var peg$e1 = peg$literalExpectation("restart", false);
  var peg$e2 = peg$literalExpectation("pause", false);
  var peg$e3 = peg$literalExpectation("resume", false);
  var peg$e4 = peg$literalExpectation("await", false);
  var peg$e5 = peg$literalExpectation("Bip", false);
  var peg$e6 = peg$literalExpectation("Beep", false);
  var peg$e7 = peg$literalExpectation(":", false);
  var peg$e8 = peg$literalExpectation("echo", false);
  var peg$e9 = peg$literalExpectation("(", false);
  var peg$e10 = peg$literalExpectation(")", false);
  var peg$e11 = peg$literalExpectation(".", false);
  var peg$e12 = peg$literalExpectation("varmul", false);
  var peg$e13 = peg$literalExpectation(":=", false);
  var peg$e14 = peg$literalExpectation("var", false);
  var peg$e15 = peg$classExpectation(["-", "+", "*", "/"], false, false);
  var peg$e16 = peg$literalExpectation("=", false);
  var peg$e17 = peg$literalExpectation("blockCall", false);
  var peg$e18 = peg$literalExpectation("@", false);
  var peg$e19 = peg$literalExpectation(",", false);
  var peg$e20 = peg$literalExpectation("[", false);
  var peg$e21 = peg$literalExpectation("]", false);
  var peg$e22 = peg$literalExpectation("|", false);
  var peg$e23 = peg$literalExpectation("seq:", false);
  var peg$e24 = peg$literalExpectation("onBreak:", false);
  var peg$e25 = peg$literalExpectation("par", false);
  var peg$e26 = peg$literalExpectation("mix", false);
  var peg$e27 = peg$literalExpectation("inside", false);
  var peg$e28 = peg$literalExpectation("exitAfter", false);
  var peg$e29 = peg$literalExpectation("finished", false);
  var peg$e30 = peg$literalExpectation("supplBranchBy", false);
  var peg$e31 = peg$literalExpectation("if", false);
  var peg$e32 = peg$literalExpectation("else:", false);
  var peg$e33 = peg$literalExpectation("while", false);
  var peg$e34 = peg$literalExpectation("repeat", false);
  var peg$e35 = peg$literalExpectation("spawn", false);
  var peg$e36 = peg$literalExpectation("js", false);
  var peg$e37 = peg$literalExpectation("whileTrueAwaitFrame", false);
  var peg$e38 = peg$literalExpectation("whileTrueAwaitDom_js", false);
  var peg$e39 = peg$literalExpectation("match", false);
  var peg$e40 = peg$literalExpectation("case", false);
  var peg$e41 = peg$literalExpectation("def", false);
  var peg$e42 = peg$literalExpectation("whileTrue_dependsOn", false);
  var peg$e43 = peg$literalExpectation("**", false);
  var peg$e44 = peg$literalExpectation("*", false);
  var peg$e45 = peg$literalExpectation("/", false);
  var peg$e46 = peg$literalExpectation("+", false);
  var peg$e47 = peg$literalExpectation("-", false);
  var peg$e48 = peg$literalExpectation("<=", false);
  var peg$e49 = peg$literalExpectation(">=", false);
  var peg$e50 = peg$literalExpectation("!=", false);
  var peg$e51 = peg$literalExpectation("<", false);
  var peg$e52 = peg$literalExpectation(">", false);
  var peg$e53 = peg$literalExpectation("not", false);
  var peg$e54 = peg$literalExpectation("and", false);
  var peg$e55 = peg$literalExpectation("or", false);
  var peg$e56 = peg$otherExpectation("simple_name");
  var peg$e57 = peg$otherExpectation("non_underscore_simple_name");
  var peg$e58 = peg$classExpectation([["A", "Z"], ["a", "z"]], false, false);
  var peg$e59 = peg$classExpectation([["0", "9"], ["A", "Z"], ["a", "z"], "_"], false, false);
  var peg$e60 = peg$otherExpectation("underscore_simple_name");
  var peg$e61 = peg$literalExpectation("_", false);
  var peg$e62 = peg$classExpectation([["A", "Z"], ["a", "z"], "_"], false, false);
  var peg$e63 = peg$otherExpectation("simple_operator");
  var peg$e64 = peg$classExpectation(["=", "+", "*", "/", "<", ">", "-"], false, false);
  var peg$e65 = peg$classExpectation(["_", "=", "+", "*", "/", "<", ">", "-"], false, false);
  var peg$e66 = peg$otherExpectation("flat_optional_spaces");
  var peg$e67 = peg$otherExpectation("optional_spaces");
  var peg$e68 = peg$otherExpectation("flat_space(s)");
  var peg$e69 = peg$otherExpectation("space(s)");
  var peg$e70 = peg$otherExpectation("comment");
  var peg$e71 = peg$otherExpectation("sharp_comment");
  var peg$e72 = peg$literalExpectation("#", false);
  var peg$e73 = peg$classExpectation(["\n", "\r"], true, false);
  var peg$e74 = peg$otherExpectation("slash_comment");
  var peg$e75 = peg$literalExpectation("//", false);
  var peg$e76 = peg$otherExpectation("single_space");
  var peg$e77 = peg$classExpectation([" ", "\t"], false, false);
  var peg$e78 = peg$otherExpectation("white_space");
  var peg$e79 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false);
  var peg$e80 = peg$otherExpectation("newline");
  var peg$e81 = peg$classExpectation(["\n", "\r"], false, false);
  var peg$e82 = peg$otherExpectation("white_line");
  var peg$e83 = peg$otherExpectation("new_white_line");
  var peg$e84 = peg$otherExpectation("boolean");
  var peg$e85 = peg$literalExpectation("true", false);
  var peg$e86 = peg$literalExpectation("false", false);
  var peg$e87 = peg$otherExpectation("number");
  var peg$e88 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e89 = peg$classExpectation(["."], false, false);
  var peg$e90 = peg$otherExpectation("string");
  var peg$e91 = peg$literalExpectation("\"", false);
  var peg$e92 = peg$classExpectation(["\""], true, false);
  var peg$e93 = peg$literalExpectation("'", false);
  var peg$e94 = peg$classExpectation(["'"], true, false);
  var peg$e95 = peg$literalExpectation("`", false);
  var peg$e96 = peg$classExpectation(["`"], true, false);
  var peg$e97 = peg$otherExpectation("js_line_without_tab");
  var peg$e98 = peg$classExpectation(["\t", "\n"], true, false);
  var peg$e99 = peg$classExpectation(["\n"], true, false);
  var peg$e100 = peg$otherExpectation("tabulations");
  var peg$e101 = peg$literalExpectation("\t", false);

  var peg$f0 = function(expr) { return new Expression('program', expr, expr.text) };
  var peg$f1 = function(op, n) { return toExpression(op, [toIdentifier(n)]) };
  var peg$f2 = function(bxp, n, n2) {
		return toExpression('awaitInNamespace', [toExpression( 'get', [toIdentifier(n)] ), toIdentifier(n2), toIdentifier(bxp.toLowerCase())])
	};
  var peg$f3 = function(bxp, n) { return toExpression('await', [toIdentifier(n), toIdentifier(bxp.toLowerCase())]) };
  var peg$f4 = function(expr) { return toExpression('print', [expr]) };
  var peg$f5 = function(expr) {return expr};
  var peg$f6 = function(n, n2, n3) {
		return toExpression('getFromNamespace', [toExpression('getFromNamespace', [toExpression('get', [n]), n2]), n3])
	};
  var peg$f7 = function(n, n2, n3) {
		return toExpression('getFromObject', [toExpression('getFromObject', [toExpression('get', [n]), n2]), n3])
	};
  var peg$f8 = function(n, n2) {
		return toExpression('getFromNamespace', [toExpression('get', [n]), n2])
	};
  var peg$f9 = function(n, n2) {
		return toExpression('getFromObject', [toExpression('get', [n]), n2])
	};
  var peg$f10 = function(n) {
		const oper = (n.content[0] === '_') ? 'evalget' : 'get'
		return toExpression(oper, [n])
	};
  var peg$f11 = function(expr1, expr2) {
		if (expr2 === null) return toExpression('varmul', [toIdentifier(expr1)])
		else return [
			toExpression('varmul', [toIdentifier(expr1)]),
			toExpression('set', [toIdentifier(expr1), expr2])
		]
	};
  var peg$f12 = function(expr1, expr2) {
		if (expr2 === null) return toExpression('var', [toIdentifier(expr1)])
		else return [
			toExpression('var', [toIdentifier(expr1)]),
			toExpression('set', [toIdentifier(expr1), expr2])
		]
	};
  var peg$f13 = function(n, op, expr) {
		return toExpression(
			'set', 
			[
				toIdentifier(n),
				toExpression(
					op,
					[
						toExpression( 'get', [toIdentifier(n)] ),
						expr
					]
				)
			]
		)
	};
  var peg$f14 = function(n, n2, n3, expr) {
		return toExpression('setToNamespace', [toExpression('getFromNamespace', [toExpression('get', [toIdentifier(n)]), toIdentifier(n2)]), toIdentifier(n3), expr])
	};
  var peg$f15 = function(n, n2, n3, expr) {
		return toExpression('setToObject', [toExpression('getFromObject', [toExpression('get', [toIdentifier(n)]), toIdentifier(n2)]), toIdentifier(n3), expr])
	};
  var peg$f16 = function(n, n2, expr) {
		return toExpression('setToNamespace', [toExpression('get', [toIdentifier(n)]), toIdentifier(n2), expr])
	};
  var peg$f17 = function(n, n2, expr) {
		return toExpression('setToObject', [toExpression('get', [toIdentifier(n)]), toIdentifier(n2), expr])
	};
  var peg$f18 = function(n, expr) { return toExpression('set', [toIdentifier(n), expr]) };
  var peg$f19 = function(i, n, exprs, exprLabel, bl) {
		return toExpression(n, exprs.concat(bl), exprLabel)
	};
  var peg$f20 = function(n, exprs) {
		const l_callExpr = toExpression(n, exprs)
		if (n === 'seq') l_callExpr.seqFunction = true
		return l_callExpr
	};
  var peg$f21 = function(exprs) { return  new Expression('expression', exprs.flat(), text()) };
  var peg$f22 = function(exprs) { return  toExpression('par', exprs) };
  var peg$f23 = function(exprLabel, bl, blCanceled) {
		return toExpression('seq', bl, exprLabel, blCanceled ? toExpression('seq', blCanceled) : undefined)
	};
  var peg$f24 = function(op, inside, exit, suppl, exprLabel, bl, blCanceled) {
		if (inside && exit) {
			return toExpression(
				'foreach_race_mult',
				[toIdentifier(inside), exit].concat(bl),
				exprLabel || undefined,
				blCanceled ? toExpression('seq', blCanceled) : undefined,
				suppl || undefined
			)
		} else if (inside) {
			return toExpression(
				'foreach',
				[toIdentifier(inside)].concat(bl),
				exprLabel || undefined,
				blCanceled ? toExpression('seq', blCanceled) : undefined,
				suppl || undefined
			)
		} else if (exit) {
			return toExpression(
				'par_race_mult',
				[toIdentifier(exit)].concat(bl),
				//[
				//	toExpression('par', [exit].concat(bl))
				//],
				exprLabel || undefined,
				blCanceled ? toExpression('seq', blCanceled) : undefined,
				suppl || undefined
			)
		}
		return toExpression(
			op, bl, exprLabel || undefined,
			blCanceled ? toExpression('seq', blCanceled) : undefined,
			suppl || undefined
		)
	};
  var peg$f25 = function(expr, blYes, blNo) {
		if (blNo === null) return toExpression('if', [expr,blYes])
		else return toExpression('if', [expr,blYes,toIdentifier('else'),blNo])
	};
  var peg$f26 = function(op, expr, exprLabel, bl, blCanceled) {
		return toExpression(op, [expr].concat(bl), exprLabel, blCanceled ? toExpression('seq', blCanceled) : undefined)
	};
  var peg$f27 = function(n, bl) {
		return toExpression('spawn', [toIdentifier(n)].concat(bl))
	};
  var peg$f28 = function(exprs, jslines) {
		return toExpression(
			'short', [
				new Expression( 'expression', exprs.map(elt=>toIdentifier(elt)), text() ),
				new Expression('string', jslines, jslines )
			]
		)
	};
  var peg$f29 = function(type, keyObj, exprLabel, jslines) {
		return toExpression(
			'continuous', [
				toIdentifier(type),
				toIdentifier(keyObj),
				new Expression('string', jslines, jslines )
			], exprLabel
		)
	};
  var peg$f30 = function(target, evt, exprLabel, jslines) {
		return toExpression(
			'whileTrueAwaitDom_js', [
				target,
				toIdentifier(evt),
				new Expression('string', jslines, jslines )
			], exprLabel
		)
	};
  var peg$f31 = function(expr, exprLabel, cases) {
		return toExpression('match', [expr, ...cases].flat(), exprLabel)
	};
  var peg$f32 = function(expr, bl) {return [toIdentifier('case'), expr, ...bl]};
  var peg$f33 = function(n, param, bl) {
		return [
			toExpression('var', [toIdentifier(n)]),
			toExpression('set', [
				toIdentifier(n),
				toExpression('lambda', [
					toIdentifier(param),
					...bl
				])
			])
		]
	};
  var peg$f34 = function(n, exprs, bl) {
		return [
			toExpression('var', [toIdentifier(n)]),
			toExpression('set', [
				toIdentifier(n),
				toExpression('lambda', [
					new Expression( 'expression', exprs.map(elt=>toIdentifier(elt)), text() ),
					...bl
				])
			])
		]
	};
  var peg$f35 = function(exprs, bl) {
		return toExpression(
			'whileTrue_dependsOn',
			[
				toExpression('par', [exprs.map(elt=>toIdentifier(elt))]),
				toExpression('seq', bl)
			]
		)
	};
  var peg$f36 = function(expr1, expr2) {
		if (expr2 === null) return expr1
		else return toExpression('**', [expr1,expr2])
	};
  var peg$f37 = function(expr1, exprs) {
		return exprs.reduce(
			(acc, elt) => toExpression( elt[1], [acc,elt[3]] ),
			expr1
		)
	};
  var peg$f38 = function(expr1, exprs) {
		return exprs.reduce(
			(acc, elt) => toExpression( elt[1], [acc,elt[3]] ),
			expr1
		)
	};
  var peg$f39 = function(expr1, expr2) {
		if (expr2 === null) return expr1
		else return toExpression((expr2[1]=='!=')?'/=':expr2[1], [expr1,expr2[3]])
	};
  var peg$f40 = function(b) {
		return toExpression('not', [b])
	};
  var peg$f41 = function(expr1, expr2) {
		if (expr2 === null) return expr1
		else return toExpression('and', [expr1,expr2])
	};
  var peg$f42 = function(expr1, expr2) {
		if (expr2 === null) return expr1
		else return toExpression('or', [expr1,expr2])
	};
  var peg$f43 = function(startExpr, restExpr) { return [startExpr].concat(restExpr.flat()).filter(elt=>(elt!==null)) };
  var peg$f44 = function(tabs) {return tabs.length == indentationCount};
  var peg$f45 = function(tabs) {};
  var peg$f46 = function(tabs) {return tabs.length == indentationCount + 1};
  var peg$f47 = function(tabs) {
		indentationStack.push(indentationCount)
		indentationCount += 1
	};
  var peg$f48 = function(tabs) {indentationCount = indentationStack.pop()};
  var peg$f49 = function(n) { return toIdentifier(n) };
  var peg$f50 = function() {return null};
  var peg$f51 = function(b) { return toIdentifier(b) };
  var peg$f52 = function(digits) {
		return new Expression(
			'number',
			parseFloat(  text()   ),
			text()
		)
	};
  var peg$f53 = function() {return parseInt( text() )};
  var peg$f54 = function(content) { return new Expression('string', content.join(""), text() ) };
  var peg$f55 = function(content) { return new Expression('string', content.join(""), text() ) };
  var peg$f56 = function(content) { return new Expression('string', content.join(""), text() ) };
  var peg$f57 = function(tabs) {return tabs.length > indentationCount};
  var peg$currPos = 0;
  var peg$savedPos = 0;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = 0;
  var peg$maxFailExpected = [];
  var peg$silentFails = 0;

  var peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsestart() {
    var s0;

    s0 = peg$parseprogram();

    return s0;
  }

  function peg$parseprogram() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseoptSpaces();
    s2 = peg$parseexpression();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseoptSpaces();
      peg$savedPos = s0;
      s0 = peg$f0(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseexpression() {
    var s0;

    s0 = peg$parseseqExpr();
    if (s0 === peg$FAILED) {
      s0 = peg$parseparExpr();
      if (s0 === peg$FAILED) {
        s0 = peg$parseifExpr();
        if (s0 === peg$FAILED) {
          s0 = peg$parseloopExpr();
          if (s0 === peg$FAILED) {
            s0 = peg$parsedefAllparamExpr();
            if (s0 === peg$FAILED) {
              s0 = peg$parsedefExpr();
              if (s0 === peg$FAILED) {
                s0 = peg$parseblockCallExpr();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsematchExpr();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsespawnExpr();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsejsExpr();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsewhileTrue_dependsOn_Expr();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parsewhileTrueAwaitFrame_Expr();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parsewhileTrueAwaitDom_Expr();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseechoExpr();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseawaitInnamespaceBxpExpr();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseawaitBxpExpr();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parsedirectExpr();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parsevarmulExpr();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parsevarExpr();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parsespecialAssignmentExpr();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parseobjectAssignment2Expr();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parseobjectAssignmentExpr();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parsenamespaceAssignment2Expr();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parsenamespaceAssignmentExpr();
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parseassignmentExpr();
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$parselogicSumExpr();
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsedirectExpr() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c0) {
      s1 = peg$c0;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c1) {
        s1 = peg$c1;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c2) {
          s1 = peg$c2;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e2); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c3) {
            s1 = peg$c3;
            peg$currPos += 6;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseflatSpaces();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesimpleName();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f1(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseawaitInnamespaceBxpExpr() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c4) {
      s1 = peg$c4;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c5) {
        s2 = peg$c5;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c6) {
          s2 = peg$c6;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e6); }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseflatSpaces();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsesimpleName();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s5 = peg$c7;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e7); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsesimpleName();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f2(s2, s4, s6);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseawaitBxpExpr() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c4) {
      s1 = peg$c4;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c5) {
        s2 = peg$c5;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c6) {
          s2 = peg$c6;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e6); }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseflatSpaces();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsesimpleName();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f3(s2, s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseechoExpr() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c8) {
      s1 = peg$c8;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseflatSpaces();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpression();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f4(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesimpleExpression() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c9;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e9); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parselogicSumExpr();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 41) {
          s5 = peg$c10;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e10); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f5(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsestring();
      if (s0 === peg$FAILED) {
        s0 = peg$parseparListExpr();
        if (s0 === peg$FAILED) {
          s0 = peg$parselistExpr();
          if (s0 === peg$FAILED) {
            s0 = peg$parsenumber();
            if (s0 === peg$FAILED) {
              s0 = peg$parseboolean();
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsename();
                if (s1 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 58) {
                    s2 = peg$c7;
                    peg$currPos++;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e7); }
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parsename();
                    if (s3 === peg$FAILED) {
                      s3 = peg$parsenumber();
                    }
                    if (s3 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 58) {
                        s4 = peg$c7;
                        peg$currPos++;
                      } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e7); }
                      }
                      if (s4 !== peg$FAILED) {
                        s5 = peg$parsename();
                        if (s5 === peg$FAILED) {
                          s5 = peg$parsenumber();
                        }
                        if (s5 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f6(s1, s3, s5);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parsename();
                  if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 46) {
                      s2 = peg$c11;
                      peg$currPos++;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e11); }
                    }
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parsename();
                      if (s3 === peg$FAILED) {
                        s3 = peg$parsenumber();
                      }
                      if (s3 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 46) {
                          s4 = peg$c11;
                          peg$currPos++;
                        } else {
                          s4 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e11); }
                        }
                        if (s4 !== peg$FAILED) {
                          s5 = peg$parsename();
                          if (s5 === peg$FAILED) {
                            s5 = peg$parsenumber();
                          }
                          if (s5 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f7(s1, s3, s5);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parsename();
                    if (s1 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 58) {
                        s2 = peg$c7;
                        peg$currPos++;
                      } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e7); }
                      }
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parsename();
                        if (s3 === peg$FAILED) {
                          s3 = peg$parsenumber();
                        }
                        if (s3 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f8(s1, s3);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parsename();
                      if (s1 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 46) {
                          s2 = peg$c11;
                          peg$currPos++;
                        } else {
                          s2 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e11); }
                        }
                        if (s2 !== peg$FAILED) {
                          s3 = peg$parsename();
                          if (s3 === peg$FAILED) {
                            s3 = peg$parsenumber();
                          }
                          if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f9(s1, s3);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsecallExpr();
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parsename();
                          if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$f10(s1);
                          }
                          s0 = s1;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsevarmulExpr() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c12) {
      s1 = peg$c12;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseflatSpaces();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesimpleName();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parse__();
          if (input.substr(peg$currPos, 2) === peg$c13) {
            s6 = peg$c13;
            peg$currPos += 2;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e13); }
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parse__();
            s8 = peg$parseexpression();
            if (s8 !== peg$FAILED) {
              s4 = s8;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f11(s3, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsevarExpr() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c14) {
      s1 = peg$c14;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseflatSpaces();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesimpleName();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parse__();
          if (input.substr(peg$currPos, 2) === peg$c13) {
            s6 = peg$c13;
            peg$currPos += 2;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e13); }
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parse__();
            s8 = peg$parseexpression();
            if (s8 !== peg$FAILED) {
              s4 = s8;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f12(s3, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsespecialAssignmentExpr() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parsesimpleName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e15); }
      }
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s4 = peg$c15;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e16); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse__();
          s6 = peg$parseexpression();
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f13(s1, s3, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenamespaceAssignment2Expr() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parsesimpleName();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 58) {
        s2 = peg$c7;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesimpleName();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s4 = peg$c7;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e7); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsesimpleName();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (input.substr(peg$currPos, 2) === peg$c13) {
                s7 = peg$c13;
                peg$currPos += 2;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e13); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse__();
                s9 = peg$parseexpression();
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f14(s1, s3, s5, s9);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseobjectAssignment2Expr() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parsesimpleName();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s2 = peg$c11;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesimpleName();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 46) {
            s4 = peg$c11;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e11); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsesimpleName();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (input.substr(peg$currPos, 2) === peg$c13) {
                s7 = peg$c13;
                peg$currPos += 2;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e13); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse__();
                s9 = peg$parseexpression();
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f15(s1, s3, s5, s9);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenamespaceAssignmentExpr() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsesimpleName();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 58) {
        s2 = peg$c7;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesimpleName();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          if (input.substr(peg$currPos, 2) === peg$c13) {
            s5 = peg$c13;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e13); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            s7 = peg$parseexpression();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f16(s1, s3, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseobjectAssignmentExpr() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsesimpleName();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s2 = peg$c11;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesimpleName();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          if (input.substr(peg$currPos, 2) === peg$c13) {
            s5 = peg$c13;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e13); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            s7 = peg$parseexpression();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f17(s1, s3, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseassignmentExpr() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsesimpleName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (input.substr(peg$currPos, 2) === peg$c13) {
        s3 = peg$c13;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e13); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = peg$parseexpression();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f18(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseblockCallExpr() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c16) {
      s1 = peg$c16;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsenatNumber();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseflatSpaces();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsename();
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = [];
            if (s6.length >= (s2|0)) {
              s7 = peg$FAILED;
            } else {
              s7 = peg$currPos;
              s8 = peg$parseflatSpaces();
              if (s8 !== peg$FAILED) {
                s9 = peg$parselogicSumExpr();
                if (s9 !== peg$FAILED) {
                  s7 = s9;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            }
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              if (s6.length >= (s2|0)) {
                s7 = peg$FAILED;
              } else {
                s7 = peg$currPos;
                s8 = peg$parseflatSpaces();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parselogicSumExpr();
                  if (s9 !== peg$FAILED) {
                    s7 = s9;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              }
            }
            if (s6.length < (s2|0)) {
              peg$currPos = s5;
              s5 = peg$FAILED;
            } else {
              s5 = s6;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (input.charCodeAt(peg$currPos) === 58) {
                s7 = peg$c7;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e7); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$currPos;
                s9 = peg$parseflatSpaces();
                if (s9 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 64) {
                    s10 = peg$c17;
                    peg$currPos++;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e18); }
                  }
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parsesimpleName();
                    if (s11 !== peg$FAILED) {
                      s8 = s11;
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
                if (s8 === peg$FAILED) {
                  s8 = null;
                }
                s9 = peg$parseBLOCK();
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f19(s2, s4, s5, s8, s9);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecallExpr() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parsesimpleName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c9;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e9); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = [];
        s6 = peg$parselogicSumExpr();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$currPos;
          s7 = peg$currPos;
          s8 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 44) {
            s9 = peg$c18;
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e19); }
          }
          if (s9 !== peg$FAILED) {
            s10 = peg$parse__();
            s8 = [s8, s9, s10];
            s7 = s8;
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          if (s7 !== peg$FAILED) {
            s7 = peg$parselogicSumExpr();
            if (s7 === peg$FAILED) {
              peg$currPos = s6;
              s6 = peg$FAILED;
            } else {
              s6 = s7;
            }
          } else {
            s6 = s7;
          }
        }
        s6 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 41) {
          s7 = peg$c10;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e10); }
        }
        if (s7 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f20(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselistExpr() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c19;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = [];
      s4 = peg$parselogicSumExpr();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$currPos;
        s6 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 44) {
          s7 = peg$c18;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e19); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse__();
          s6 = [s6, s7, s8];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s5 = peg$parselogicSumExpr();
          if (s5 === peg$FAILED) {
            peg$currPos = s4;
            s4 = peg$FAILED;
          } else {
            s4 = s5;
          }
        } else {
          s4 = s5;
        }
      }
      s4 = peg$parse__();
      if (input.charCodeAt(peg$currPos) === 93) {
        s5 = peg$c20;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e21); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f21(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseparListExpr() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 124) {
      s1 = peg$c21;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = [];
      s4 = peg$parselogicSumExpr();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$currPos;
        s6 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 44) {
          s7 = peg$c18;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e19); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse__();
          s6 = [s6, s7, s8];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s5 = peg$parselogicSumExpr();
          if (s5 === peg$FAILED) {
            peg$currPos = s4;
            s4 = peg$FAILED;
          } else {
            s4 = s5;
          }
        } else {
          s4 = s5;
        }
      }
      s4 = peg$parse__();
      if (input.charCodeAt(peg$currPos) === 124) {
        s5 = peg$c21;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f22(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseseqExpr() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c22) {
      s1 = peg$c22;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseflatSpaces();
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 64) {
          s4 = peg$c17;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e18); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsesimpleName();
          if (s5 !== peg$FAILED) {
            s2 = s5;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseBLOCK();
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$parsenewline();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseSAMEDENT();
          if (s6 !== peg$FAILED) {
            if (input.substr(peg$currPos, 8) === peg$c23) {
              s7 = peg$c23;
              peg$currPos += 8;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e24); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parseBLOCK();
              if (s8 !== peg$FAILED) {
                s4 = s8;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f23(s2, s3, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseparExpr() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c24) {
      s1 = peg$c24;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c25) {
        s1 = peg$c25;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e26); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseflatSpaces();
      if (s3 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c26) {
          s4 = peg$c26;
          peg$currPos += 6;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e27); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseflatSpaces();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsesimpleName();
            if (s6 !== peg$FAILED) {
              s2 = s6;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$currPos;
      s4 = peg$parseflatSpaces();
      if (s4 !== peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c27) {
          s5 = peg$c27;
          peg$currPos += 9;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e28); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parseflatSpaces();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsenumber();
            if (s7 !== peg$FAILED) {
              s8 = peg$parseflatSpaces();
              if (s8 !== peg$FAILED) {
                if (input.substr(peg$currPos, 8) === peg$c28) {
                  s9 = peg$c28;
                  peg$currPos += 8;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e29); }
                }
                if (s9 !== peg$FAILED) {
                  s3 = s7;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$currPos;
      s5 = peg$parseflatSpaces();
      if (s5 !== peg$FAILED) {
        if (input.substr(peg$currPos, 13) === peg$c29) {
          s6 = peg$c29;
          peg$currPos += 13;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e30); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parseflatSpaces();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsesimpleName();
            if (s8 !== peg$FAILED) {
              s4 = s8;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s5 = peg$c7;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parseflatSpaces();
        if (s7 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 64) {
            s8 = peg$c17;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e18); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parsesimpleName();
            if (s9 !== peg$FAILED) {
              s6 = s9;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$parseBLOCK();
        if (s7 !== peg$FAILED) {
          s8 = peg$currPos;
          s9 = peg$parsenewline();
          if (s9 !== peg$FAILED) {
            s10 = peg$parseSAMEDENT();
            if (s10 !== peg$FAILED) {
              if (input.substr(peg$currPos, 8) === peg$c23) {
                s11 = peg$c23;
                peg$currPos += 8;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e24); }
              }
              if (s11 !== peg$FAILED) {
                s12 = peg$parseBLOCK();
                if (s12 !== peg$FAILED) {
                  s8 = s12;
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
            } else {
              peg$currPos = s8;
              s8 = peg$FAILED;
            }
          } else {
            peg$currPos = s8;
            s8 = peg$FAILED;
          }
          if (s8 === peg$FAILED) {
            s8 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f24(s1, s2, s3, s4, s6, s7, s8);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseifExpr() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c30) {
      s1 = peg$c30;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseflatSpaces();
      if (s2 !== peg$FAILED) {
        s3 = peg$parselogicSumExpr();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 58) {
            s5 = peg$c7;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e7); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseBLOCK();
            if (s6 !== peg$FAILED) {
              s7 = peg$currPos;
              s8 = peg$parsenewline();
              if (s8 !== peg$FAILED) {
                s9 = peg$parseSAMEDENT();
                if (s9 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 5) === peg$c31) {
                    s10 = peg$c31;
                    peg$currPos += 5;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e32); }
                  }
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parseBLOCK();
                    if (s11 !== peg$FAILED) {
                      s7 = s11;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              if (s7 === peg$FAILED) {
                s7 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f25(s3, s6, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseloopExpr() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c32) {
      s1 = peg$c32;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c33) {
        s1 = peg$c33;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e34); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseflatSpaces();
      if (s2 !== peg$FAILED) {
        s3 = peg$parselogicSumExpr();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 58) {
            s5 = peg$c7;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e7); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parseflatSpaces();
            if (s7 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 64) {
                s8 = peg$c17;
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e18); }
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$parsesimpleName();
                if (s9 !== peg$FAILED) {
                  s6 = s9;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            s7 = peg$parseBLOCK();
            if (s7 !== peg$FAILED) {
              s8 = peg$currPos;
              s9 = peg$parsenewline();
              if (s9 !== peg$FAILED) {
                s10 = peg$parseSAMEDENT();
                if (s10 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 8) === peg$c23) {
                    s11 = peg$c23;
                    peg$currPos += 8;
                  } else {
                    s11 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e24); }
                  }
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parseBLOCK();
                    if (s12 !== peg$FAILED) {
                      s8 = s12;
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
              if (s8 === peg$FAILED) {
                s8 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f26(s1, s3, s6, s7, s8);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsespawnExpr() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c34) {
      s1 = peg$c34;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e35); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseflatSpaces();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesimpleName();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 58) {
            s5 = peg$c7;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e7); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseBLOCK();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f27(s3, s6);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsejsExpr() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c35) {
      s1 = peg$c35;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c9;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e9); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = [];
        s6 = peg$parsesimpleName();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$currPos;
          s7 = peg$currPos;
          s8 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 44) {
            s9 = peg$c18;
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e19); }
          }
          if (s9 !== peg$FAILED) {
            s10 = peg$parse__();
            s8 = [s8, s9, s10];
            s7 = s8;
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          if (s7 !== peg$FAILED) {
            s7 = peg$parsesimpleName();
            if (s7 === peg$FAILED) {
              peg$currPos = s6;
              s6 = peg$FAILED;
            } else {
              s6 = s7;
            }
          } else {
            s6 = s7;
          }
        }
        s6 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 41) {
          s7 = peg$c10;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e10); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 58) {
            s9 = peg$c7;
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e7); }
          }
          if (s9 !== peg$FAILED) {
            s10 = peg$parsenewline();
            if (s10 !== peg$FAILED) {
              s11 = peg$currPos;
              s12 = peg$currPos;
              s13 = [];
              s14 = peg$parsejsline();
              if (s14 === peg$FAILED) {
                s14 = peg$parsewhiteLine();
              }
              while (s14 !== peg$FAILED) {
                s13.push(s14);
                s14 = peg$currPos;
                s15 = peg$parsenewline();
                if (s15 !== peg$FAILED) {
                  s15 = peg$parsejsline();
                  if (s15 === peg$FAILED) {
                    s15 = peg$parsewhiteLine();
                  }
                  if (s15 === peg$FAILED) {
                    peg$currPos = s14;
                    s14 = peg$FAILED;
                  } else {
                    s14 = s15;
                  }
                } else {
                  s14 = s15;
                }
              }
              if (s13.length < 1) {
                peg$currPos = s12;
                s12 = peg$FAILED;
              } else {
                s12 = s13;
              }
              if (s12 !== peg$FAILED) {
                s11 = input.substring(s11, peg$currPos);
              } else {
                s11 = s12;
              }
              if (s11 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f28(s5, s11);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewhileTrueAwaitFrame_Expr() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 19) === peg$c36) {
      s1 = peg$c36;
      peg$currPos += 19;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseflatSpaces();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesimpleName();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseflatSpaces();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsesimpleName();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (input.charCodeAt(peg$currPos) === 58) {
                s7 = peg$c7;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e7); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$currPos;
                s9 = peg$parseflatSpaces();
                if (s9 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 64) {
                    s10 = peg$c17;
                    peg$currPos++;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e18); }
                  }
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parsesimpleName();
                    if (s11 !== peg$FAILED) {
                      s8 = s11;
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
                if (s8 === peg$FAILED) {
                  s8 = null;
                }
                s9 = peg$parsenewline();
                if (s9 !== peg$FAILED) {
                  s10 = peg$currPos;
                  s11 = peg$currPos;
                  s12 = [];
                  s13 = peg$parsejsline();
                  if (s13 === peg$FAILED) {
                    s13 = peg$parsewhiteLine();
                  }
                  while (s13 !== peg$FAILED) {
                    s12.push(s13);
                    s13 = peg$currPos;
                    s14 = peg$parsenewline();
                    if (s14 !== peg$FAILED) {
                      s14 = peg$parsejsline();
                      if (s14 === peg$FAILED) {
                        s14 = peg$parsewhiteLine();
                      }
                      if (s14 === peg$FAILED) {
                        peg$currPos = s13;
                        s13 = peg$FAILED;
                      } else {
                        s13 = s14;
                      }
                    } else {
                      s13 = s14;
                    }
                  }
                  if (s12.length < 1) {
                    peg$currPos = s11;
                    s11 = peg$FAILED;
                  } else {
                    s11 = s12;
                  }
                  if (s11 !== peg$FAILED) {
                    s10 = input.substring(s10, peg$currPos);
                  } else {
                    s10 = s11;
                  }
                  if (s10 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f29(s3, s5, s8, s10);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewhileTrueAwaitDom_Expr() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 20) === peg$c37) {
      s1 = peg$c37;
      peg$currPos += 20;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e38); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseflatSpaces();
      if (s2 !== peg$FAILED) {
        s3 = peg$parselogicSumExpr();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseflatSpaces();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsesimpleName();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (input.charCodeAt(peg$currPos) === 58) {
                s7 = peg$c7;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e7); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$currPos;
                s9 = peg$parseflatSpaces();
                if (s9 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 64) {
                    s10 = peg$c17;
                    peg$currPos++;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e18); }
                  }
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parsesimpleName();
                    if (s11 !== peg$FAILED) {
                      s8 = s11;
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
                if (s8 === peg$FAILED) {
                  s8 = null;
                }
                s9 = peg$parsenewline();
                if (s9 !== peg$FAILED) {
                  s10 = peg$currPos;
                  s11 = peg$currPos;
                  s12 = [];
                  s13 = peg$parsejsline();
                  if (s13 === peg$FAILED) {
                    s13 = peg$parsewhiteLine();
                  }
                  while (s13 !== peg$FAILED) {
                    s12.push(s13);
                    s13 = peg$currPos;
                    s14 = peg$parsenewline();
                    if (s14 !== peg$FAILED) {
                      s14 = peg$parsejsline();
                      if (s14 === peg$FAILED) {
                        s14 = peg$parsewhiteLine();
                      }
                      if (s14 === peg$FAILED) {
                        peg$currPos = s13;
                        s13 = peg$FAILED;
                      } else {
                        s13 = s14;
                      }
                    } else {
                      s13 = s14;
                    }
                  }
                  if (s12.length < 1) {
                    peg$currPos = s11;
                    s11 = peg$FAILED;
                  } else {
                    s11 = s12;
                  }
                  if (s11 !== peg$FAILED) {
                    s10 = input.substring(s10, peg$currPos);
                  } else {
                    s10 = s11;
                  }
                  if (s10 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f30(s3, s5, s8, s10);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsematchExpr() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c38) {
      s1 = peg$c38;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e39); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseflatSpaces();
      if (s2 !== peg$FAILED) {
        s3 = peg$parselogicSumExpr();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 58) {
            s5 = peg$c7;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e7); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parseflatSpaces();
            if (s7 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 64) {
                s8 = peg$c17;
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e18); }
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$parsesimpleName();
                if (s9 !== peg$FAILED) {
                  s6 = s9;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            s7 = peg$parsenewline();
            if (s7 !== peg$FAILED) {
              s8 = peg$parseINDENT();
              if (s8 !== peg$FAILED) {
                s9 = peg$currPos;
                s10 = [];
                s11 = peg$parsecaseExpr();
                while (s11 !== peg$FAILED) {
                  s10.push(s11);
                  s11 = peg$currPos;
                  s12 = peg$currPos;
                  s13 = peg$parsenewline();
                  if (s13 !== peg$FAILED) {
                    s14 = peg$parseSAMEDENT();
                    if (s14 !== peg$FAILED) {
                      s13 = [s13, s14];
                      s12 = s13;
                    } else {
                      peg$currPos = s12;
                      s12 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s12;
                    s12 = peg$FAILED;
                  }
                  if (s12 !== peg$FAILED) {
                    s12 = peg$parsecaseExpr();
                    if (s12 === peg$FAILED) {
                      peg$currPos = s11;
                      s11 = peg$FAILED;
                    } else {
                      s11 = s12;
                    }
                  } else {
                    s11 = s12;
                  }
                }
                if (s10.length < 1) {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                } else {
                  s9 = s10;
                }
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f31(s3, s6, s9);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecaseExpr() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c39) {
      s1 = peg$c39;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e40); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseflatSpaces();
      if (s2 !== peg$FAILED) {
        s3 = peg$parselogicSumExpr();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 58) {
            s5 = peg$c7;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e7); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseBLOCK();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f32(s3, s6);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedefAllparamExpr() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c40) {
      s1 = peg$c40;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e41); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseflatSpaces();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesimpleName();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 40) {
            s5 = peg$c9;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (input.charCodeAt(peg$currPos) === 58) {
              s7 = peg$c7;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e7); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parsesimpleName();
              if (s8 !== peg$FAILED) {
                s9 = peg$parse__();
                if (input.charCodeAt(peg$currPos) === 41) {
                  s10 = peg$c10;
                  peg$currPos++;
                } else {
                  s10 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e10); }
                }
                if (s10 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 58) {
                    s11 = peg$c7;
                    peg$currPos++;
                  } else {
                    s11 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e7); }
                  }
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parseBLOCK();
                    if (s12 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f33(s3, s8, s12);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedefExpr() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c40) {
      s1 = peg$c40;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e41); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseflatSpaces();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesimpleName();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 40) {
            s5 = peg$c9;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            s7 = [];
            s8 = peg$parsesimpleName();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$currPos;
              s9 = peg$currPos;
              s10 = peg$parse__();
              if (input.charCodeAt(peg$currPos) === 44) {
                s11 = peg$c18;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e19); }
              }
              if (s11 !== peg$FAILED) {
                s12 = peg$parse__();
                s10 = [s10, s11, s12];
                s9 = s10;
              } else {
                peg$currPos = s9;
                s9 = peg$FAILED;
              }
              if (s9 !== peg$FAILED) {
                s9 = peg$parsesimpleName();
                if (s9 === peg$FAILED) {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                } else {
                  s8 = s9;
                }
              } else {
                s8 = s9;
              }
            }
            s8 = peg$parse__();
            if (input.charCodeAt(peg$currPos) === 41) {
              s9 = peg$c10;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e10); }
            }
            if (s9 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 58) {
                s10 = peg$c7;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e7); }
              }
              if (s10 !== peg$FAILED) {
                s11 = peg$parseBLOCK();
                if (s11 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f34(s3, s7, s11);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewhileTrue_dependsOn_Expr() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 19) === peg$c41) {
      s1 = peg$c41;
      peg$currPos += 19;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e42); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = [];
      s4 = peg$parsesimpleName();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$currPos;
        s6 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 44) {
          s7 = peg$c18;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e19); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse__();
          s6 = [s6, s7, s8];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s5 = peg$parsesimpleName();
          if (s5 === peg$FAILED) {
            peg$currPos = s4;
            s4 = peg$FAILED;
          } else {
            s4 = s5;
          }
        } else {
          s4 = s5;
        }
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s4 = peg$c7;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseBLOCK();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f35(s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepowerExpr() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parsesimpleExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse__();
      if (input.substr(peg$currPos, 2) === peg$c42) {
        s4 = peg$c42;
        peg$currPos += 2;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e43); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse__();
        s6 = peg$parsesimpleExpression();
        if (s6 !== peg$FAILED) {
          s2 = s6;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f36(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseproductExpr() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsepowerExpr();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (input.charCodeAt(peg$currPos) === 42) {
        s5 = peg$c43;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e44); }
      }
      if (s5 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 47) {
          s5 = peg$c44;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e45); }
        }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parsepowerExpr();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 42) {
          s5 = peg$c43;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e44); }
        }
        if (s5 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 47) {
            s5 = peg$c44;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e45); }
          }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parsepowerExpr();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f37(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesumExpr() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseproductExpr();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (input.charCodeAt(peg$currPos) === 43) {
        s5 = peg$c45;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e46); }
      }
      if (s5 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s5 = peg$c46;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e47); }
        }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parseproductExpr();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 43) {
          s5 = peg$c45;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e46); }
        }
        if (s5 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 45) {
            s5 = peg$c46;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e47); }
          }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parseproductExpr();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f38(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecomparExpr() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parsesumExpr();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse__();
      if (input.substr(peg$currPos, 2) === peg$c47) {
        s4 = peg$c47;
        peg$currPos += 2;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e48); }
      }
      if (s4 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c48) {
          s4 = peg$c48;
          peg$currPos += 2;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e49); }
        }
        if (s4 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c49) {
            s4 = peg$c49;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e50); }
          }
          if (s4 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 60) {
              s4 = peg$c50;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e51); }
            }
            if (s4 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 62) {
                s4 = peg$c51;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e52); }
              }
              if (s4 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 61) {
                  s4 = peg$c15;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e16); }
                }
              }
            }
          }
        }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse__();
        s6 = peg$parsesumExpr();
        if (s6 !== peg$FAILED) {
          s3 = [s3, s4, s5, s6];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f39(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesimpleBoolExpr() {
    var s0;

    s0 = peg$parsecomparExpr();
    if (s0 === peg$FAILED) {
      s0 = peg$parseboolean();
    }

    return s0;
  }

  function peg$parselogicNotExpr() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c52) {
      s1 = peg$c52;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e53); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseflatSpaces();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesimpleBoolExpr();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f40(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselogicProdExpr() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parselogicNotExpr();
    if (s1 === peg$FAILED) {
      s1 = peg$parsesimpleBoolExpr();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseflatSpaces();
      if (s3 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c53) {
          s4 = peg$c53;
          peg$currPos += 3;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e54); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseflatSpaces();
          if (s5 !== peg$FAILED) {
            s6 = peg$parselogicNotExpr();
            if (s6 === peg$FAILED) {
              s6 = peg$parsesimpleBoolExpr();
            }
            if (s6 !== peg$FAILED) {
              s2 = s6;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f41(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselogicSumExpr() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parselogicProdExpr();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseflatSpaces();
      if (s3 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c54) {
          s4 = peg$c54;
          peg$currPos += 2;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e55); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseflatSpaces();
          if (s5 !== peg$FAILED) {
            s6 = peg$parselogicProdExpr();
            if (s6 !== peg$FAILED) {
              s2 = s6;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f42(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBLOCK() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsenewWhiteLine();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsenewWhiteLine();
    }
    s2 = peg$parsenewline();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseINDENT();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsecomment();
        if (s4 === peg$FAILED) {
          s4 = peg$parseexpression();
        }
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$currPos;
          s7 = [];
          s8 = peg$parsenewWhiteLine();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parsenewWhiteLine();
          }
          s8 = peg$parsenewline();
          if (s8 !== peg$FAILED) {
            s9 = peg$parseSAMEDENT();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomment();
              if (s10 === peg$FAILED) {
                s10 = peg$parseexpression();
              }
              if (s10 !== peg$FAILED) {
                s6 = s10;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$currPos;
            s7 = [];
            s8 = peg$parsenewWhiteLine();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parsenewWhiteLine();
            }
            s8 = peg$parsenewline();
            if (s8 !== peg$FAILED) {
              s9 = peg$parseSAMEDENT();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomment();
                if (s10 === peg$FAILED) {
                  s10 = peg$parseexpression();
                }
                if (s10 !== peg$FAILED) {
                  s6 = s10;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          }
          s6 = peg$currPos;
          peg$silentFails++;
          s7 = peg$currPos;
          s8 = peg$parsenewline();
          if (s8 !== peg$FAILED) {
            s9 = peg$parseDEDENT();
            s8 = [s8, s9];
            s7 = s8;
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          peg$silentFails--;
          if (s7 !== peg$FAILED) {
            peg$currPos = s6;
            s6 = undefined;
          } else {
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f43(s4, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSAMEDENT() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsetabs();
    peg$savedPos = peg$currPos;
    s2 = peg$f44(s1);
    if (s2) {
      s2 = undefined;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f45(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseINDENT() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsetabs();
    peg$savedPos = peg$currPos;
    s2 = peg$f46(s1);
    if (s2) {
      s2 = undefined;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f47(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDEDENT() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsetabs();
    peg$savedPos = s0;
    s1 = peg$f48(s1);
    s0 = s1;

    return s0;
  }

  function peg$parsename() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsesimpleName();
    if (s1 === peg$FAILED) {
      s1 = peg$parsesimpleOper();
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f49(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesimpleName() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsenonUnderscoreSimpleName();
    if (s0 === peg$FAILED) {
      s0 = peg$parseunderscoreSimpleName();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e56); }
    }

    return s0;
  }

  function peg$parsenonUnderscoreSimpleName() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    if (peg$r1.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e58); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      if (peg$r2.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e59); }
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        if (peg$r2.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e59); }
        }
      }
      s2 = [s2, s3];
      s1 = s2;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e57); }
    }

    return s0;
  }

  function peg$parseunderscoreSimpleName() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 95) {
      s2 = peg$c55;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e61); }
    }
    if (s2 !== peg$FAILED) {
      if (peg$r3.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e62); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        if (peg$r2.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e59); }
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          if (peg$r2.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e59); }
          }
        }
        s2 = [s2, s3, s4];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e60); }
    }

    return s0;
  }

  function peg$parsesimpleOper() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    if (peg$r4.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e64); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      if (peg$r5.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e65); }
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        if (peg$r5.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e65); }
        }
      }
      s2 = [s2, s3];
      s1 = s2;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e63); }
    }

    return s0;
  }

  function peg$parse__() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = peg$parsecomment();
    if (s1 === peg$FAILED) {
      s1 = peg$parsesingleSpace();
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parsecomment();
      if (s1 === peg$FAILED) {
        s1 = peg$parsesingleSpace();
      }
    }
    peg$silentFails--;
    s1 = peg$FAILED;
    if (peg$silentFails === 0) { peg$fail(peg$e66); }

    return s0;
  }

  function peg$parseoptSpaces() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = peg$parsecomment();
    if (s1 === peg$FAILED) {
      s1 = peg$parsesingleSpace();
      if (s1 === peg$FAILED) {
        s1 = peg$parsenewline();
      }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parsecomment();
      if (s1 === peg$FAILED) {
        s1 = peg$parsesingleSpace();
        if (s1 === peg$FAILED) {
          s1 = peg$parsenewline();
        }
      }
    }
    peg$silentFails--;
    s1 = peg$FAILED;
    if (peg$silentFails === 0) { peg$fail(peg$e67); }

    return s0;
  }

  function peg$parseflatSpaces() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = peg$parsecomment();
    if (s1 === peg$FAILED) {
      s1 = peg$parsesingleSpace();
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parsecomment();
        if (s1 === peg$FAILED) {
          s1 = peg$parsesingleSpace();
        }
      }
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e68); }
    }

    return s0;
  }

  function peg$parsespaces() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = peg$parsecomment();
    if (s1 === peg$FAILED) {
      s1 = peg$parsesingleSpace();
      if (s1 === peg$FAILED) {
        s1 = peg$parsenewline();
      }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parsecomment();
        if (s1 === peg$FAILED) {
          s1 = peg$parsesingleSpace();
          if (s1 === peg$FAILED) {
            s1 = peg$parsenewline();
          }
        }
      }
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e69); }
    }

    return s0;
  }

  function peg$parsecomment() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsecommentSharp();
    if (s1 === peg$FAILED) {
      s1 = peg$parsecommentDoubleSlash();
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f50();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e70); }
    }

    return s0;
  }

  function peg$parsecommentSharp() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 35) {
      s1 = peg$c56;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e72); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$r6.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e73); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$r6.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e73); }
        }
      }
      s3 = peg$currPos;
      peg$silentFails++;
      s4 = peg$parsenewline();
      peg$silentFails--;
      if (s4 !== peg$FAILED) {
        peg$currPos = s3;
        s3 = undefined;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e71); }
    }

    return s0;
  }

  function peg$parsecommentDoubleSlash() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c57) {
      s1 = peg$c57;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e75); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$r6.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e73); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$r6.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e73); }
        }
      }
      s3 = peg$currPos;
      peg$silentFails++;
      s4 = peg$parsenewline();
      peg$silentFails--;
      if (s4 !== peg$FAILED) {
        peg$currPos = s3;
        s3 = undefined;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e74); }
    }

    return s0;
  }

  function peg$parsesingleSpace() {
    var s0, s1;

    peg$silentFails++;
    if (peg$r7.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e77); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e76); }
    }

    return s0;
  }

  function peg$parsewhiteSpace() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    if (peg$r8.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e79); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$r8.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e79); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e78); }
    }

    return s0;
  }

  function peg$parsenewline() {
    var s0, s1;

    peg$silentFails++;
    if (peg$r9.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e81); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e80); }
    }

    return s0;
  }

  function peg$parsewhiteLine() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    if (peg$r7.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e77); }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      if (peg$r7.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e77); }
      }
    }
    s2 = peg$currPos;
    peg$silentFails++;
    s3 = peg$parsenewline();
    peg$silentFails--;
    if (s3 !== peg$FAILED) {
      peg$currPos = s2;
      s2 = undefined;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e82); }
    }

    return s0;
  }

  function peg$parsenewWhiteLine() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsenewline();
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$r7.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e77); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$r7.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e77); }
        }
      }
      s3 = peg$currPos;
      peg$silentFails++;
      s4 = peg$parsenewline();
      peg$silentFails--;
      if (s4 !== peg$FAILED) {
        peg$currPos = s3;
        s3 = undefined;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e83); }
    }

    return s0;
  }

  function peg$parseboolean() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c58) {
      s1 = peg$c58;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e85); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c59) {
        s1 = peg$c59;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e86); }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f51(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e84); }
    }

    return s0;
  }

  function peg$parsenumber() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s2 = peg$c46;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = [];
    if (peg$r10.test(input.charAt(peg$currPos))) {
      s4 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e88); }
    }
    if (s4 !== peg$FAILED) {
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        if (peg$r10.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e88); }
        }
      }
    } else {
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$currPos;
      if (peg$r11.test(input.charAt(peg$currPos))) {
        s5 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e89); }
      }
      if (s5 !== peg$FAILED) {
        s6 = [];
        if (peg$r10.test(input.charAt(peg$currPos))) {
          s7 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e88); }
        }
        if (s7 !== peg$FAILED) {
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            if (peg$r10.test(input.charAt(peg$currPos))) {
              s7 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e88); }
            }
          }
        } else {
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s2 = [s2, s3, s4];
      s1 = s2;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f52(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e87); }
    }

    return s0;
  }

  function peg$parsenatNumber() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$r10.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e88); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$r10.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e88); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f53();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsestring() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c60;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e91); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$r12.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e92); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$r12.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e92); }
        }
      }
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c60;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e91); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f54(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s1 = peg$c61;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e93); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$r13.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e94); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$r13.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e94); }
          }
        }
        if (input.charCodeAt(peg$currPos) === 39) {
          s3 = peg$c61;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e93); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f55(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 96) {
          s1 = peg$c62;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e95); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          if (peg$r14.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e96); }
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$r14.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e96); }
            }
          }
          if (input.charCodeAt(peg$currPos) === 96) {
            s3 = peg$c62;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e95); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f56(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e90); }
    }

    return s0;
  }

  function peg$parsejsline() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsetabs();
    peg$savedPos = peg$currPos;
    s2 = peg$f57(s1);
    if (s2) {
      s2 = undefined;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      if (peg$r15.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e98); }
      }
      if (s4 !== peg$FAILED) {
        s3 = input.substring(s3, peg$currPos);
      } else {
        s3 = s4;
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        if (peg$r16.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e99); }
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          if (peg$r16.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e99); }
          }
        }
        s1 = [s1, s2, s3, s4];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e97); }
    }

    return s0;
  }

  function peg$parsetabs() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    if (input.charCodeAt(peg$currPos) === 9) {
      s1 = peg$c63;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e101); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (input.charCodeAt(peg$currPos) === 9) {
        s1 = peg$c63;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e101); }
      }
    }
    peg$silentFails--;
    s1 = peg$FAILED;
    if (peg$silentFails === 0) { peg$fail(peg$e100); }

    return s0;
  }


	let indentationCount = 0
	let indentationStack = []
	function toIdentifier(p_stringName_or_identifier) {
		if (p_stringName_or_identifier instanceof Expression) return p_stringName_or_identifier
		return new Expression('identifier', p_stringName_or_identifier, p_stringName_or_identifier)
	}
	function toExpression(ps_name, pArrayExpression, pExprLabel, pCancelExpr, pMultLabel) {
		return new Expression(
			'expression',
			[toIdentifier(ps_name)].concat(pArrayExpression.flat()),
			text(),
			pExprLabel,
			pCancelExpr,
			pMultLabel
		)
	}
	function Expression(type, content, text, exprLabel, cancelExpression, multLabel) {
		this.type = type
		this.content = content
		this.text = text
		this.exprLabel = exprLabel
		this.cancelExpression = cancelExpression
		this.multLabel = multLabel
		this.location = location()
	}

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

  return {
    SyntaxError: peg$SyntaxError,
    parse: peg$parse
  };
})()
;
