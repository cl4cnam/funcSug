.var dummy
.var document <-- .import document

#====================================
# Click functions
#====================================

{deffunc getClick (p_idElt p_evtSug)
#        --------
	{ext (p_idElt) `
		const lElt = (p_idElt instanceof Element) ? p_idElt : document.querySelector(p_idElt)
		if (lElt===null) console.log("ERROR !!! libDOM.fs/getClick '" + p_idElt + "' selector references no element!")
		lElt.disabled = false
		const l_react = function(evt) {
			evt.preventDefault()
			lElt.removeEventListener('click', l_react)
			lElt.disabled = true
			const l_meaning = lElt.getAttribute('data-meaning')
			if (l_meaning) output(l_meaning)
			else output(lElt.innerHTML)
		};
		lElt.addEventListener('click', l_react)
		SAVES.push({elt:lElt, react:l_react})
	` $p_evtSug `
		SAVE.elt.removeEventListener('click', SAVE.react)
		SAVE.elt.disabled = true
	`}
}

{deffunc awaitClickBip (p_idElt)
#        -------------
		.var evtSug
		(&getClick $p_idElt evtSug)
		:await evtSug bip
}

{deffunc awaitClickBeep (p_idElt)
#        --------------
		.var evtSug
		(&getClick $p_idElt evtSug)
		:await evtSug beep
}

{deffunc awaitNewChoice (p_type p_around p_choice)
#        --------------
	.var response
	.var choicesPar
	{foreach @choicesPar p_choice
		.var choiceText
		{seq
			choiceText <-- :displayNewMessageIn $p_choice $p_around
			response <-- .awaitClickBeep $choiceText
			.break choicesPar
		}
		~{if [$p_type = 'remove']
			{short (choiceText) `choiceText.parentNode.removeChild(choiceText)`}
		}
	}
	$response
}

{deffunc awaitChoice (p_choice)
#        --------------
	.var response
	.var choicesPar
	{if .isString $p_choice
		p_choice <-- .listToPar {short (p_choice) `return [...document.querySelectorAll(p_choice)]`}
	}
	{foreach @choicesPar p_choice
		.var choiceText
		{seq
			response <-- .awaitClickBeep $p_choice
			.break choicesPar
		}
	}
	$response
}

#====================================
# Display functions
#====================================

{deffunc addCssClassTo (p_class p_selector)
#        -------------
	{short (p_class p_selector) `
		const lElt_anchor = document.querySelector(p_selector)
		if (lElt_anchor===null) console.log("ERROR !!! libDOM.fs/addCssClassTo '" + p_selector + "' selector references no element!")
		lElt_anchor.classList.add(p_class)
	`}
}

{deffunc DelCssClassFrom (p_class p_selector)
#        ---------------
	{short (p_class p_selector) `
		const lElt_anchor = document.querySelector(p_selector)
		if (lElt_anchor===null) console.log("ERROR !!! libDOM.fs/addCssClassTo '" + p_selector + "' selector references no element!")
		lElt_anchor.classList.remove(p_class)
	`}
}

{deffunc existsCssSelector (p_selector)
#        -----------------
	{short (p_selector) `
		return document.querySelector(p_selector) !== null
	`}
}

{deffunc setCssProperty (p_id p_property p_value)
#        --------------
	{short (p_id p_property p_value) `
		const lElt = document.getElementById(p_id)
		if (lElt===null) console.error("ERROR !!! libDOM.fg/setCssProperty '" + p_id + "' id references no element!")
		lElt.style[p_property] = p_value
	`}
}

{deffunc displayNewMessageIn (p_message p_idAnchor)
#        -------------------
	.var elt
	{ext (p_message p_idAnchor) `
		const lList_idAnchor = p_idAnchor.split('/')
		const ls_idAnchor = lList_idAnchor[0]
		const ls_class = (lList_idAnchor.length>1) ? lList_idAnchor[1] : 'other'
		const lElt_anchor = document.querySelector(ls_idAnchor)
		if (lElt_anchor===null) console.log("ERROR !!! libDOM.fg/displayNewMessageIn '" + ls_idAnchor + "' selector references no element!")
		const lElt = document.createElement('p')
		lElt.classList.add('display')
		lElt.classList.add(ls_class)
		lElt.innerHTML = p_message
		lElt_anchor.appendChild(lElt)
		lElt.scrollIntoView()
		output(lElt)
	` elt}
	:await elt beep
}

{deffunc displayNewMessage (p_message)
#        -----------------
	(&displayNewMessageIn $p_message 'body')
}

{deffunc displayMessageIn (p_message p_idAnchor)
#        ----------------
	.var elt
	{ext (p_message p_idAnchor) `
		const lElt_anchor = (p_idAnchor instanceof Element) ? p_idAnchor : document.querySelector(p_idAnchor)
		if (lElt_anchor===null) console.log("ERROR !!! libDOM.fs/displayMessageIn '" + p_idAnchor + "' selector references no element!")
		lElt_anchor.innerHTML = p_message
		lElt_anchor.scrollIntoView()
		output(lElt_anchor)
	` elt}
	:await elt beep
}

#====================================
# Input functions
#====================================

{deffunc getDomevent (p_domevt p_idElt p_evtSug)
#        --------
	{ext (p_domevt p_idElt) `
		const lElt = (p_idElt instanceof Element) ? p_idElt : document.querySelector(p_idElt)
		if (lElt===null) console.log("ERROR !!! libDOM.fg/getDomevent '" + p_idElt + "' selector references no element!")
		lElt.disabled = false
		const l_react = function(evt) {
			evt.preventDefault()
			lElt.removeEventListener(p_domevt, l_react)
			output(evt)
		};
		lElt.addEventListener(p_domevt, l_react)
		SAVES.push({elt:lElt, react:l_react})
	` $p_evtSug `
		SAVE.elt.removeEventListener(p_domevt, SAVE.react)
	`}
}

{deffunc awaitDomeventBip (p_domevt p_idElt)
#        -------------
		.var evtSug
		(&getDomevent $p_domevt $p_idElt evtSug)
		:await evtSug bip
}

{deffunc awaitDomeventBeep (p_domevt p_idElt)
#        --------------
		.var evtSug
		(&getDomevent $p_domevt $p_idElt evtSug)
		:await evtSug beep
}

{deffunc listen (p_elt p_evtDOM p_evtSug)
	{ext (p_elt p_evtDOM p_evtSug) `
		const l_react = function(evt) {
			goAssign(p_evtSug, evt)
		}
		p_elt.addEventListener(p_evtDOM, l_react)
		SAVES.push({elt:p_elt, react:l_react, evtDOM:p_evtDOM})
	` dummy `
		SAVE.elt.removeEventListener(SAVE.evtDOM, SAVE.react)
	`}
}

{deffunc listener (p_target p_evtDOM p_sToExecute)
	{ext (p_target p_evtDOM) (+ `
		const l_react = function(evt) {
			` $p_sToExecute `
		}
		p_target.addEventListener(p_evtDOM, l_react)
		SAVES.push({elt:p_target, react:l_react, evtDOM:p_evtDOM})
	`) dummy `
		SAVE.elt.removeEventListener(SAVE.evtDOM, SAVE.react)
	`}
}

{deffunc listenOnce (p_elt p_evtDOM p_evtSug)
	{ext (p_elt p_evtDOM) `
		const l_react = function(evt) {
			p_elt.removeEventListener(p_evtDOM, l_react)
			output(evt)
		}
		p_elt.addEventListener(p_evtDOM, l_react)
		SAVES.push({elt:p_elt, react:l_react, evtDOM:p_evtDOM})
	` $p_evtSug `
		//~ console.log('DELETE')
		SAVE.elt.removeEventListener(SAVE.evtDOM, SAVE.react)
	`}
}

{deffunc awaitDOMevtBeep (p_elt p_evtDOM)
	.var evtSug
	%listenOnce $p_elt $p_evtDOM evtSug
	:await evtSug beep
}

{deffunc loopAwaitDOMevt (p_elt p_sEvtDOM p_eltB p_sExternalScript)
	{while true
		.var evtSug
		%listenOnce $p_elt $p_sEvtDOM evtSug
		.var evt <-- :await evtSug beep
		.var target <-- $p_elt
		.var elt <-- $p_eltB
		{short (evt target elt) $p_sExternalScript}
	}
}

{deffunc inputNewHumanTextIn (p_evtSugB p_idAnchor)
#        -------------------
	{ext (p_idAnchor) `
		const lElt_anchor = document.querySelector(p_idAnchor)
		if (lElt_anchor===null) console.log("ERROR !!! libDOM.fs/inputNewHumanTextIn '" + p_idAnchor + "' selector references no element!")
		const lElt = document.createElement('p')
		lElt.classList.add('entry')
		lElt.classList.add('self')
		lElt.setAttribute('contentEditable', 'true')
		setTimeout(O=>lElt.focus(), 0)
		const l_react = function(evt) {
			if (evt.inputType==="insertParagraph") {
				lElt.removeEventListener('beforeinput', l_react)
				lElt.setAttribute('contentEditable', 'false')
				lElt.classList.replace('entry', 'display')
				evt.preventDefault()
				//console.log('OK', evt.target.textContent)
				output(evt.target.textContent)
			}
		}
		lElt.addEventListener('beforeinput', l_react)
		lElt_anchor.appendChild(lElt)
		SAVES.push({elt:lElt, react:l_react})
	` $p_evtSugB `
		SAVE.elt.removeEventListener('beforeinput', SAVE.react)
		SAVE.elt.setAttribute('contentEditable', 'false')
		SAVE.elt.classList.replace('entry', 'display')
		SAVE.elt.classList.add('canceled')
	`}
}

{deffunc inputNewHumanText (p_evtSugB)
#        -----------------
	(&inputNewHumanTextIn $p_evtSugB 'body')
}

{deffunc awaitNewHumanTextIn (p_idAnchor)
#        -------------------
		.var evtSugA
		(&inputNewHumanTextIn evtSugA $p_idAnchor)
		:await evtSugA beep
}

{deffunc awaitNewHumanNumberIn (p_idAnchor)
#        ---------------------
		.var tryText <-- 'notANumber'
		.var whileA
		{while @whileA true {seq
			:set tryText (&awaitNewHumanTextIn $p_idAnchor)
			{if :and .not [$tryText < 0] .not [$tryText >= 0]
				(&displayNewMessageIn 'This is not a number!' :+ $p_idAnchor '/error')
			else
				.break whileA
			}
		}}
		$tryText
}

{deffunc awaitHumanText ()
#        --------------
		.var evtSugA
		(&inputNewHumanText evtSugA)
		:await evtSugA beep
}

#====================================
# Time functions
#====================================

{deffunc waitMilliseconds (p_nMilliseconds)
#        -----------
		.var waitEnd
		{ext (p_nMilliseconds) `
			setTimeout(
				O=>output(p_nMilliseconds),
				p_nMilliseconds
			)
		` waitEnd}
		:await waitEnd beep
}

{deffunc waitSeconds (p_nSeconds)
#        -----------
	(&waitMilliseconds :* 1000 $p_nSeconds)
}

#====================================
# File functions
#====================================

{deffunc getFileText (p_filePath p_evtContent)
#        -----------
	{ext (p_filePath) `
		fetch(p_filePath).then(response=>output(response.text()))
	` $p_evtContent}
}

{deffunc awaitFileText (p_filePath)
#        -------------
	.var content
	:getFileText $p_filePath content
	:await content beep
}
